Class Firebase.RTDB Extends %RegisteredObject
{

ClassMethod ConfigApp(appName As %String, url As %String, credentialFile As %String)
{
    Set ^Firebase(appName,"url")=url
    Set ^Firebase(appName,"credentialFile")=credentialFile
}

ClassMethod Create(appName As %String, object As %DynamicObject, dataBase As %String, id As %String = "") As %String
{
    Set url = $G(^Firebase(appName,"url"))
    Q:(url="") 0

    Set credentialFile = $G(^Firebase(appName,"credentialFile"))
    Q:(credentialFile="") 0
    
    Set data= object.%ToJSON()
    
    Set newId=..SaveFirebase(url,credentialFile,dataBase,data,,id)
    
    Quit newId
}

ClassMethod Update(appName As %String, dataBase As %String, id As %String, object As %DynamicObject) As %String
{
    Set url = $G(^Firebase(appName,"url"))
    Q:(url="") 0

    Set credentialFile = $G(^Firebase(appName,"credentialFile"))
    Q:(credentialFile="") 0
    
    Set data= object.%ToJSON()
    Set update=1
    Set id=..SaveFirebase(url,credentialFile,dataBase,data,update,id)
    
    Quit id
}

ClassMethod Delete(appName As %String, dataBase As %String, id As %String = "") As %String
{
    Set url = $G(^Firebase(appName,"url"))
    Q:(url="") 0

    Set credentialFile = $G(^Firebase(appName,"credentialFile"))
    Q:(credentialFile="") 0
    
    Set result=..DeleteFirebase(url,credentialFile,dataBase,id)
    
    Quit result
}

ClassMethod Read(appName As %String, dataBase As %String, id As %String) As %DynamicObject
{
    Set url = $G(^Firebase(appName,"url"))
    Q:(url="") 0

    Set credentialFile = $G(^Firebase(appName,"credentialFile"))
    Q:(credentialFile="") 0
    
    Set jsonString=..ReadItemFirebase(url,credentialFile,dataBase,id)
    Set jsonString=$Replace(jsonString,"'","""")
    Set res={}
    Set res=res.%FromJSON(jsonString)

    Quit res
}

ClassMethod ReadTable(appName As %String, dataBase As %String) As %DynamicObject
{
    Set url = $G(^Firebase(appName,"url"))
    Q:(url="") 0

    Set credentialFile = $G(^Firebase(appName,"credentialFile"))
    Q:(credentialFile="") 0
    
    Set jsonString=..ReadTableFirebase(url,credentialFile,dataBase)
    Set jsonString=$Replace(jsonString,"'","""")
    Set res={}
    Set res=res.%FromJSON(jsonString)

    Quit res
}

ClassMethod SaveFirebase(url As %String, credentialFile As %String, dataBase As %String, data As %String, update As %Boolean = 0, id As %String = "") As %String [ Language = python ]
{
    import json
    import firebase_admin
    import os
    from firebase_admin import credentials, auth
    from firebase_admin import db
    
    try:
   
        if not firebase_admin._apps:
            cred = credentials.Certificate(credentialFile)
            firebase_admin.initialize_app(cred, {'databaseURL': url})

        if (update == 1 ) & (id == ""):
            print("Update operation require id parameter mandatory")
            return 0
            

        ref = db.reference(f'/{dataBase}')

        dataJson = json.loads(data)
  
        if (id == ""):  # if id is empty create one autogenerated based on timestamp
            new_id = ref.push().key
            ref.child(new_id).update(dataJson)

        elif (update == 1):
            ref.child(id).update(dataJson)
            new_id = id

        else :
            ref.child(id).set(dataJson)
            new_id = id


        return new_id

    except Exception as error:
        # Capturamos cualquier excepción y la imprimimos por la terminal
        print(f"Error: {error}")
        return 0
}

ClassMethod DeleteFirebase(url As %String, credentialFile As %String, dataBase As %String, id As %String = "") As %String [ Language = python ]
{
    import json
    import firebase_admin
    from firebase_admin import credentials, auth
    from firebase_admin import db
    
    try:
        if not firebase_admin._apps:
            cred = credentials.Certificate(credentialFile)
            firebase_admin.initialize_app(cred, {'databaseURL': url})

    
        ref = db.reference(f'/{dataBase}')

        
        if id == "":
            ref.delete()
        else:
            ref.child(id).delete()
       
        

        return 1

    except Exception as error:
        # Capturamos cualquier excepción y la imprimimos por la terminal
        print(f"Error: {error}")
        return 0
}

ClassMethod ReadTableFirebase(url As %String, credentialFile As %String, dataBase As %String) As %String [ Language = python ]
{
    import json
    import firebase_admin
    import os
    from firebase_admin import credentials, auth
    from firebase_admin import db
    
    try:
   
        if not firebase_admin._apps:
            cred = credentials.Certificate('irisfirebaseexample.json') #credentialFile)
            firebase_admin.initialize_app(cred, {'databaseURL': url})

       
        ref = db.reference(f'/{dataBase}')

        dataJson = ref.get()
        
        
        return str(dataJson)

    except Exception as error:
        # Capturamos cualquier excepción y la imprimimos por la terminal
        print(f"Error: {error}")
        return 0
}

ClassMethod ReadItemFirebase(url As %String, credentialFile As %String, dataBase As %String, id As %String) As %String [ Language = python ]
{
    import json
    import firebase_admin
    import os
    from firebase_admin import credentials, auth
    from firebase_admin import db
    
    try:
   
        if not firebase_admin._apps:
            cred = credentials.Certificate(credentialFile)
            firebase_admin.initialize_app(cred, {'databaseURL': url})

       
        ref = db.reference(f'/{dataBase}')

        dataJson = ref.child(id).get()
        
        return str(dataJson)

    except Exception as error:
        # Capturamos cualquier excepción y la imprimimos por la terminal
        print(f"Error: {error}")
        return 0
}

// NOT FULLY IMPLEMENTED PYTHON VERSION IN FIREBASE

ClassMethod ListenTableFirebase(url As %String, credentialFile As %String, dataBase As %String, appName As %String) As %String [ Language = python ]
{
    import json
    import firebase_admin
    import os
    from firebase_admin import credentials, auth
    from firebase_admin import db
    import iris

    def listener(event):
        #print(event.event_type)  # can be 'put' or 'patch'
        #print(event.path)  # relative to the reference, it seems
        #print(event.data)  # new data at /reference/event.path. None if deleted
        #iris.cls('Firebase.RTDB').ProcessEvent(event.event_type, event.path, str(event.data))
        
        channel = appName + dataBase
        print(channel)
        iris.cls('Firebase.RTDB').PublishEvent(channel, event.event_type, event.path, str(event.data))
        
    
    try:
   
        if not firebase_admin._apps:
            cred = credentials.Certificate('irisfirebaseexample.json') #credentialFile)
            firebase_admin.initialize_app(cred, {'databaseURL': url})

       
        ref = db.reference(f'/{dataBase}')
        
        channel = appName + dataBase

        ref.listen(listener)
        
        iris.cls('Firebase.RTDB').ListenEvents(channel)
        
        return 1

    except Exception as error:
        # Capturamos cualquier excepción y la imprimimos por la terminal
        print(f"Error: {error}")
        return 0
}

ClassMethod ProcessEvent(type As %String, path As %String, data As %String) As %Integer
{
     /*
        PUT             -> INSERT
        PATCH           -> UPDATE
        PUT & DATA = "" -> DELETE

    */

    Set x=$INCREMENT(^TESTX)
    Set ^TESTX("ENTRA",x,"type")=type
    Set ^TESTX("ENTRA",x,"path")=path
    Set ^TESTX("ENTRA",x,"data")=data

    Set res = $Select(
        ((type="put")&(data="None")):..ProcessDeleteEvent(path),
        (type="put"):..ProcessInsertEvent(path,data),
        (type="patch"):..ProcessUpdateEvent(path,data),
        1:0
    )
    
    
   

    quit res
}

ClassMethod ProcessInsertEvent(path As %String, data As %String)
{
    // Add your custom code
    Set ^TESTX("eventInsert","path")=path
    Set ^TESTX("eventInsert","data")=data
    
    Quit 1
}

ClassMethod ProcessUpdateEvent(path As %String, data As %String)
{
    // Add your custom code
    Set ^TESTX("ENTRA")="update"
    U 0 W "Data updated at "_path_" values = "_data,!
    Quit 1
}

ClassMethod ProcessDeleteEvent(path As %String, data As %String)
{
    // Add your custom code
    Set ^TESTX("ENTRA")="delete"
    U 0 W "Data deleted at "_path,!
    Quit 1
}

// NOT FULLY IMPLEMENTED PYTHON VERSION IN FIREBASE

ClassMethod ListenTable(appName As %String, dataBase As %String) As %DynamicObject
{
    Set url = $G(^Firebase(appName,"url"))
    Q:(url="") 0

    Set credentialFile = $G(^Firebase(appName,"credentialFile"))
    Q:(credentialFile="") 0
    
    Set res=..ListenTableFirebase(url,credentialFile,dataBase,appName)
    

    //Do ..ListenEvents(appName_dataBase)

    Quit res
}

// NOT FULLY IMPLEMENTED PYTHON VERSION IN FIREBASE

ClassMethod ListenEvents(channel As %String)
{
    try{
        Set count = ##class(%SYSTEM.Event).Count(channel)
    }catch(e)
    {
        Do ##class(%SYSTEM.Event).Create(channel)
    }

    for{
        set wait = ##class(%SYSTEM.Event).WaitMsg(channel)
        set code = $LG(wait,1)
        set msg = $LG(wait,2)
        U 0 W msg,!
        job $CLASSMETHOD($CLASSNAME(),"Work", msg)
    }
}

ClassMethod PublishEvent(channel As %String, type As %String, path As %String, data As %String)
{
    Set msg = type_"¬"_path_"¬"_data

    
    try{
        Set count = ##class(%SYSTEM.Event).Count(channel)
    }catch(e)
    {
        Do ##class(%SYSTEM.Event).Create(channel)
    }

    Do ##class(%SYSTEM.Event).Signal(channel, msg)
}

ClassMethod Work(value As %String)
{
    try{
        Set type = $P(value,"¬",1)
        Set path = $P(value,"¬",2)
        Set data = $P(value,"¬",3)
        Do ..ProcessEvent(type, path, data)

    }catch(e)
    {
        U 0 W e.DisplayString(1),!
    }
}

}
